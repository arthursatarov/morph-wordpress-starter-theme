/**
 * Grid Layout
 *
 * Defines a grid layout system with customizable number
 * of columns and minimum item size.
 */

@use '../mixins';
@use '../tokens';

.grid {
	--grid-cols: 12;
	--grid-item-min-size: 0;

	display: grid;
	grid-template-columns: repeat(var(--grid-cols), minmax(var(--grid-item-min-size), 1fr));
}

.grid--auto {
	--grid-cols: auto-fill;
	--grid-item-min-size: 16rem;
}

.cell {
	grid-column: 1 / -1; // By default, grid cell spans across all columns

	// Span grid cell across specified number of columns
	@for $i from 1 through 12 {
		&.span-#{$i} {
			grid-column: span #{$i} / span #{$i};
		}

		@each $breakpoint, $width in tokens.$breakpoints {
			@include mixins.above('#{$breakpoint}') {
				&.#{$breakpoint}\:span-#{$i} {
					grid-column: span #{$i} / span #{$i};
				}
			}
		}
	}

	// Set grid cell starting position
	@for $i from 1 through 12 {
		&.start-#{$i} {
			grid-column-start: #{$i};
		}

		@each $breakpoint, $width in tokens.$breakpoints {
			@include mixins.above('#{$breakpoint}') {
				&.#{$breakpoint}\:start-#{$i} {
					grid-column-start: #{$i};
				}
			}
		}
	}

	// Set grid cell ending position
	@for $i from 1 through 12 {
		&.end-#{$i} {
			grid-column-end: #{$i};
		}

		@each $breakpoint, $width in tokens.$breakpoints {
			@include mixins.above('#{$breakpoint}') {
				&.#{$breakpoint}\:end-#{$i} {
					grid-column-end: #{$i};
				}
			}
		}
	}
}

// Styles for cells within auto grid
.grid--auto > .cell {
	grid-template-columns: auto;
}
